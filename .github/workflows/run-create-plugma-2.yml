name: Test CLI with Expect

on:
    push:
        branches:
            - main

jobs:
    test-cli:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            # Install dependencies based on OS
            - name: Install Expect on Ubuntu
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y expect

            - name: Install Tcl with Expect on Windows
              if: runner.os == 'Windows'
              run: |
                  curl -LO https://prdownloads.sourceforge.net/tcl/tcl86.11.1-win32-x86_64-threaded.exe
                  ./tcl86.11.1-win32-x86_64-threaded.exe /quiet /norestart
                  echo "C:\\Tcl\\bin" >> $GITHUB_ENV

            - name: Verify Expect Installation
              run: expect -version

            # Write the Expect script dynamically
            - name: Write simulate-cli.expect
              run: |
                  echo "#!/usr/bin/expect" > simulate-cli.expect
                  echo "set timeout 30" >> simulate-cli.expect
                  echo "spawn npx create-plugma@latest" >> simulate-cli.expect
                  echo "expect \"Select a framework:\"" >> simulate-cli.expect
                  echo "send \"\\r\"" >> simulate-cli.expect
                  echo "expect \"Select a variant:\"" >> simulate-cli.expect
                  echo "send \"\\r\"" >> simulate-cli.expect
                  echo "expect \"Project name:\"" >> simulate-cli.expect
                  echo "send \"TestProject\\r\"" >> simulate-cli.expect
                  echo "expect \"Next:\"" >> simulate-cli.expect
                  echo "send \"\\r\"" >> simulate-cli.expect
                  echo "expect eof" >> simulate-cli.expect

            # Run the Expect script
            - name: Run simulate-cli.expect
              run: expect simulate-cli.expect

            # Display package.json contents
            - name: Display package.json contents
              run: |
                  echo "Contents of package.json:"
                  cat package.json || echo "Failed to read package.json"
              working-directory: TestProject

            # Install project dependencies
            - name: Install project dependencies
              run: |
                  npm install
              working-directory: TestProject

            # Build the project
            - name: Build the project
              run: |
                  npm run build
              working-directory: TestProject

            # Verify Build
            - name: Verify Build
              run: |
                  test -f dist/main.js && echo "Build succeeded" || (echo "Build failed" && exit 1)
              working-directory: TestProject
