name: Run create-plugma on multiple OS

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch: # Allows manual triggering

jobs:
    test-cli:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest] # Test on Ubuntu and Windows
        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install create-plugma locally
              run: |
                  npm install create-plugma@latest

            - name: Install dependencies for node-pty
              run: npm install node-pty

            - name: Write simulate-cli.js
              run: |
                  echo "const pty = require('node-pty');" > simulate-cli.js
                  echo "const os = require('os');" >> simulate-cli.js
                  echo "const shell = os.platform() === 'win32' ? 'cmd.exe' : 'bash';" >> simulate-cli.js
                  echo "(async () => {" >> simulate-cli.js
                  echo "  try {" >> simulate-cli.js
                  echo "    const cli = pty.spawn('npx', ['create-plugma@latest'], { name: 'xterm-color', cols: 80, rows: 30, cwd: process.cwd(), env: process.env });" >> simulate-cli.js
                  echo "    const promptResponses = [" >> simulate-cli.js
                  echo "      { prompt: 'Select a framework:', response: '\\r' }," >> simulate-cli.js
                  echo "      { prompt: 'Select a variant:', response: '\\r' }," >> simulate-cli.js
                  echo "      { prompt: 'Project name:', response: 'TestProject\\r' }," >> simulate-cli.js
                  echo "      { prompt: 'Next:', response: '\\r' }," >> simulate-cli.js
                  echo "    ];" >> simulate-cli.js
                  echo "    let currentPrompt = 0;" >> simulate-cli.js
                  echo "    cli.onData((data) => {" >> simulate-cli.js
                  echo "      console.log('STDOUT: ' + data);" >> simulate-cli.js
                  echo "      if (currentPrompt < promptResponses.length) {" >> simulate-cli.js
                  echo "        const { prompt, response } = promptResponses[currentPrompt];" >> simulate-cli.js
                  echo "        if (data.includes(prompt)) {" >> simulate-cli.js
                  echo "          console.log('Sending response: ' + (response.trim() || '<Enter>'));" >> simulate-cli.js
                  echo "          cli.write(response);" >> simulate-cli.js
                  echo "          currentPrompt++;" >> simulate-cli.js
                  echo "        }" >> simulate-cli.js
                  echo "      } else {" >> simulate-cli.js
                  echo "        console.log('Unrecognized output: ' + data);" >> simulate-cli.js
                  echo "      }" >> simulate-cli.js
                  echo "    });" >> simulate-cli.js
                  echo "    cli.onExit((code) => {" >> simulate-cli.js
                  echo "      console.log('CLI process exited with code: ' + code.exitCode);" >> simulate-cli.js
                  echo "      if (code.exitCode !== 0) { process.exit(1); }" >> simulate-cli.js
                  echo "    });" >> simulate-cli.js
                  echo "  } catch (error) {" >> simulate-cli.js
                  echo "    console.error('Error running create-plugma CLI: ' + error);" >> simulate-cli.js
                  echo "    process.exit(1);" >> simulate-cli.js
                  echo "  }" >> simulate-cli.js
                  echo "})();" >> simulate-cli.js

            - name: Run simulate-cli.js
              run: node simulate-cli.js

            - name: Verify TestProject directory
              run: |
                  if [ -d "TestProject" ]; then
                    echo "TestProject directory exists.";
                  else
                    echo "TestProject directory not found.";
                    exit 1;
                  fi

            - name: Display package.json contents
              run: |
                  echo "Contents of package.json:"
                  cat package.json || echo "Failed to read package.json"
              working-directory: TestProject

            - name: Install project dependencies
              run: |
                  npm install
              working-directory: TestProject

            - name: Build the project
              run: |
                  npm run build
              working-directory: TestProject

            - name: Verify Build
              run: |
                  test -f dist/main.js && echo "Build succeeded" || (echo "Build failed" && exit 1)
              working-directory: TestProject
