name: Run create-plugma on multiple OS

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch: # Allows manual triggering

jobs:
    test-cli:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest] # Test on Ubuntu and Windows
        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install create-plugma locally
              run: |
                  npm install create-plugma@latest

            - name: Write simulate-cli.js
              run: |
                  echo "const { spawn } = require('child_process');" > simulate-cli.js
                  echo "const isWindows = process.platform === 'win32';" >> simulate-cli.js
                  echo "const cliCommand = isWindows ? 'npx.cmd' : 'npx';" >> simulate-cli.js
                  echo "const child = spawn(cliCommand, ['create-plugma@latest'], { stdio: ['pipe', 'pipe', 'pipe'], shell: isWindows });" >> simulate-cli.js
                  echo "child.stdout.on('data', (data) => {" >> simulate-cli.js
                  echo "  const output = data.toString();" >> simulate-cli.js
                  echo "  console.log(output);" >> simulate-cli.js
                  echo "  if (output.includes('Select a framework:')) { console.log('Responding to framework prompt...'); child.stdin.write('\\n'); }" >> simulate-cli.js
                  echo "  if (output.includes('Select a variant:')) { console.log('Responding to variant prompt...'); child.stdin.write('\\n'); }" >> simulate-cli.js
                  echo "  if (output.includes('Project name:')) { console.log('Entering project name...'); child.stdin.write('TestProject\\n'); }" >> simulate-cli.js
                  echo "  if (output.includes('Next:')) { console.log('Confirming setup...'); child.stdin.write('\\n'); }" >> simulate-cli.js
                  echo "});" >> simulate-cli.js
                  echo "child.stderr.on('data', (data) => { console.error(data.toString()); });" >> simulate-cli.js
                  echo "child.on('close', (code) => {" >> simulate-cli.js
                  echo "  if (code !== 0) { console.error('CLI process exited with code:', code); process.exit(code); } else { console.log('CLI process completed successfully.'); }" >> simulate-cli.js
                  echo "});" >> simulate-cli.js

            - name: Run simulate-cli.js
              run: node simulate-cli.js

            - name: Confirm working directory after project creation
              run: |
                  echo "Current working directory:"
                  pwd
                  echo "Contents of the current directory:"
                  ls -al

            - name: Display package.json contents
              run: |
                  echo "Contents of package.json:"
                  cat package.json || echo "Failed to read package.json"
              working-directory: TestProject

            - name: Install project dependencies
              run: |
                  npm install
              working-directory: TestProject

            - name: Build the project
              run: |
                  npm run build
              working-directory: TestProject

            - name: Verify Build
              run: |
                  test -f dist/main.js && echo "Build succeeded" || (echo "Build failed" && exit 1)
              working-directory: TestProject
